@@ -47,51 +47,56 @@
 pExpression = pSubExpression

 pSubExpression :: MParser (M Char)
 pSubExpression = do
   subExp <- M.some $ M.try pMatch
   return $ concatM subExp

 pMatch :: MParser (M Char)
 pMatch = do
   i <- pMatchItem
   q <- M.optional pQuantifiers
   return $ case q of
           Nothing -> i
           Just c -> quantifier c i

 quantifier :: Char -> M Char -> M Char
 quantifier c i =
   case c of
     '*' -> kleeneStarM i
     '+' -> kleenePlusM i
     '?' -> altM [emptyStrM, i]
     _   -> error "Invalid quantifier"

 pMatchItem :: MParser (M Char)
 pMatchItem = do
-  M.try pMatchCharacterClass M.<|> M.try pMatchCharacter
+  M.try pMatchAnyChar M.<|> M.try pMatchCharacterClass M.<|> M.try pMatchCharacter
+
+pMatchAnyChar :: MParser (M Char)
+pMatchAnyChar = do
+  _ <- char '.'
+  return anyCharM

 pMatchCharacterClass :: MParser (M Char)
 pMatchCharacterClass = M.try pCharacterGroup M.<|> fmap (\g -> g Pos ) (M.try pCharacterClass)

 pMatchCharacter :: MParser (M Char)
 pMatchCharacter = do
   -- TODO: Update to only consume non special characters like letters or digits etc.
   c <- anyNotUsed "|()$"
   return $ posLit c

 pCharacterGroup :: MParser (M Char)
 pCharacterGroup = M.try pPositiveCharacterGroup M.<|> M.try pNegativeCharacterGroup

 pPositiveCharacterGroup :: MParser (M Char)
 pPositiveCharacterGroup = do
   _ <- char '['
   c <- anyNotUsed "^]"
   cs <- M.many $ pCharacterGroupItem posLit Pos
   let cs' = posLit c : cs
   _ <- char ']'
   return $ altM cs'

 pNegativeCharacterGroup :: MParser (M Char)
 pNegativeCharacterGroup = do
   _ <- char '['
