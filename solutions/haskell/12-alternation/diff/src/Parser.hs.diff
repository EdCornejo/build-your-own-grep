@@ -54,57 +54,67 @@
 neg _          = error "Unsupported input string"


 -- The regex parser starts here
 -- https://github.com/kean/Regex/blob/master/grammar.ebnf
 -- I had to adjust a few rules to support better parsing

 pRegEx :: MParser (AST Char)
 pRegEx = do
   s <- pStartOfString
   expression <- pExpression
   e <- pEndOfString
   return $ ConcatM [s, expression, e]

 pStartOfString :: MParser (AST Char)
 pStartOfString = do
   s <- M.optional $ char '^'
   return $ if isNothing s then  KleeneStarM AnyCharM else EmptyStrM

 pEndOfString :: MParser (AST Char)
 pEndOfString = do
   s <- M.optional $ char '$'
   return $ if isNothing s then KleeneStarM AnyCharM else EmptyStrM

 pExpression :: MParser (AST Char)
-pExpression = pSubExpression
+pExpression = do
+  subExpression <- pSubExpression
+  alt <- M.optional pAlternation
+  return $ case alt of
+    Nothing -> subExpression
+    Just ex -> OrM [subExpression, ex]

 pSubExpression :: MParser (AST Char)
 pSubExpression = do
   subExp <- M.some $ M.try pMatch M.<|> M.try pGroup
   return $ ConcatM subExp

+pAlternation :: MParser (AST Char)
+pAlternation = do
+  _ <- char '|'
+  pExpression
+
 pGroup :: MParser (AST Char)
 pGroup = do
   _ <- char '('
   i <- pExpression
   _ <- char ')'
   q <- M.optional $ pQuantifiers i
   return $ fromMaybe i q

 pMatch :: MParser (AST Char)
 pMatch = do
   i <- pMatchItem
   q <- M.optional $ pQuantifiers i
   return $ fromMaybe i q

 pMatchItem :: MParser (AST Char)
 pMatchItem = M.try pMatchAnyChar M.<|> M.try pMatchCharacterClass M.<|> M.try pMatchCharacter

 pMatchAnyChar :: MParser (AST Char)
 pMatchAnyChar = do
   _ <- char '.'
   return AnyCharM

 pMatchCharacterClass :: MParser (AST Char)
 pMatchCharacterClass = M.try pCharacterGroup M.<|> M.try pCharacterClass

