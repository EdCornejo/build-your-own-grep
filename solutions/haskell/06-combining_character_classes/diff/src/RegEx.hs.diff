@@ -0,0 +1,74 @@
+{-# OPTIONS_GHC -Wno-missing-export-lists #-}
+{-# OPTIONS_GHC -Wno-unrecognised-pragmas #-}
+{-# HLINT ignore "Use list comprehension" #-}
+
+module RegEx
+  where
+
+import Data.Char (isDigit, isAlphaNum)
+
+type M a = [a] -> [[a]]
+
+singleM :: (a -> Bool) -> M a
+singleM _ [] = []
+singleM p (c:cs) = if p c then [cs] else []
+
+posLit :: Eq a => a -> M a
+posLit c = singleM (== c)
+
+negLit :: Eq a => a -> M a
+negLit c = singleM (/= c)
+
+digitM :: M Char
+digitM = singleM isDigit
+
+digitInverseM :: M Char
+digitInverseM = singleM (not . isDigit)
+
+alphaNumM :: M Char
+alphaNumM = singleM (\c -> isAlphaNum c || c == '_')
+
+alphaNumInverseM :: M Char
+alphaNumInverseM = singleM (\c -> not (isAlphaNum c) && c /= '_')
+
+anyCharM :: M a
+anyCharM = singleM (const True)
+
+-- | Lets now look at some extreme matchers that we can use as identity elements in our later operations and properties
+-- | A matcher that matches nothing. Equivalent to the 'empty set' or '∅' or '0' from the theory of regular languages.
+failM :: M a
+failM _ = []
+
+-- | A matcher that matches the empty string. Equivalent to the 'empty string' or 'ε' or '1' from the theory of regular languages.
+emptyStrM :: M a
+emptyStrM s = [s]
+
+concatM :: [M a] -> M a
+concatM [] = emptyStrM
+concatM (m:ms) = \s -> concatMap (concatM ms) (m s)
+-- ^ Explanation: `(m s)` is a list of all strings remaining after matching the given string `s` with the first matcher `m` in the list. Each of the strings in `(m s)` must then be matched with the remaining matchers `ms`. This can be done by mapping `concatM ms` over each element of `m s`. This results in a list of lists of strings which then needs to be concatenated.
+
+-- | Compose a list of alternate matchers to match in parallel
+orM :: [M a] -> M a
+orM []    s  = failM s
+orM (m:ms) s = m s ++ orM ms s
+
+-- | Compose a list of alternate matchers to match in parallel
+andM :: [M a] -> M a
+andM []     s = failM s
+andM [m]    s = m s
+andM (m:ms) s | null r   = []
+              | null rs  = []
+              | otherwise = r ++ rs
+  where
+    r = m s
+    rs = andM ms s
+
+kleeneStarM :: M a -> M a
+kleeneStarM m = orM [emptyStrM, kleenePlusM m]
+
+kleenePlusM :: M a -> M a
+kleenePlusM m = concatM [m, kleeneStarM m]
+
+isMatching :: Eq a => M a -> [a] -> Bool
+isMatching m s = [] `elem` m s
