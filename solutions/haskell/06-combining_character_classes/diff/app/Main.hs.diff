@@ -1,46 +1,43 @@
-module Main where
+module Main (main) where

-import Data.Char
-import Data.List
-import Data.Maybe
+import System.IO
 import System.Environment
 import System.Exit
+import Data.Maybe
+import Parser
+import RegEx

-getAllowedCharacters :: String -> String
-getAllowedCharacters s = take (length s - 2) $ tail s
-
-getNotAllowedCharacters :: String -> String
-getNotAllowedCharacters s = take (length s - 3) $ tail $ tail s
+grep :: M Char -> IO [(Bool, String)]
+grep pattern = do
+  done <- isEOF
+  if done
+    then return []
+    else do
+      input_line <- getLine
+      let r = isMatching pattern input_line
+      rs <- grep pattern
+      return $ (r, input_line) : rs

-matchPattern :: String -> String -> Bool
-matchPattern pattern input = do
-  if pattern == "\\d"
-    then any isDigit input
-    else
-      if pattern == "\\w"
-        then any (\c -> isAlphaNum c || c == '_') input
-        else
-          if take 2 pattern == "[^"
-            then not $ or $ fmap (`elem` input) (getNotAllowedCharacters pattern)
-            else
-              if head pattern == '['
-                then or $ fmap (`elem` input) (getAllowedCharacters pattern)
-                else
-                  if length pattern == 1
-                    then head pattern `elem` input
-                    else error $ "Unhandled pattern: " ++ pattern

 main :: IO ()
 main = do
   args <- getArgs
-  let pattern = args !! 1
-  input_line <- getLine
+  let pattern = parse $ unwords $ tail args

-  if head args /= "-E"
+  if isNothing pattern
     then do
-      putStrLn "Expected first argument to be '-E'"
+      putStrLn "Invalid pattern"
       exitFailure
-    else
-      if matchPattern pattern input_line
-        then exitSuccess
-        else exitFailure
+    else do
+      if head args /= "-E"
+      then do
+        putStrLn "Expected first argument to be '-E'"
+        exitFailure
+      else do
+        bs <- grep $ astToMatcher $ fromJust pattern
+        if any ((==True) . fst) bs
+          then do
+            mapM_ (putStrLn . snd) $ filter ((==True) . fst) bs
+            exitSuccess
+          else do
+            exitFailure
