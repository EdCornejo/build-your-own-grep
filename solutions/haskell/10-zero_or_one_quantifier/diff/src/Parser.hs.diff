@@ -131,34 +131,44 @@
 pCharacterGroupItem :: MParser (AST Char)
 pCharacterGroupItem = M.try pCharacterClass M.<|> M.try pChar


 pCharacterClass :: MParser (AST Char)
 pCharacterClass = M.try pCharacterClassAnyWord M.<|> M.try pCharacterClassAnyDecimal

 pCharacterClassAnyWord :: MParser (AST a)
 pCharacterClassAnyWord = do
   _ <- char '\\'
   _ <- char 'w'
   return AlphaNumM

 pCharacterClassAnyDecimal :: MParser (AST Char)
 pCharacterClassAnyDecimal = do
   _ <- char '\\'
   _ <- char 'd'
   return DigitM

 pChar :: MParser (AST Char)
 pChar = do
   c <- notChar ']'
   return $ PosLit c

 pQuantifiers :: AST a -> MParser (AST a)
-pQuantifiers x = M.try (oneOrMoreQuantifier x)
+pQuantifiers x = M.try (zeroOrMoreQuantifier x) M.<|> M.try (oneOrMoreQuantifier x) M.<|> M.try (zeroOrOneQuantifier x)
+
+zeroOrMoreQuantifier :: AST a -> MParser (AST a)
+zeroOrMoreQuantifier x = do
+  _ <- char '*'
+  return $ KleeneStarM x

 oneOrMoreQuantifier :: AST a -> MParser (AST a)
 oneOrMoreQuantifier x = do
   _ <- char '+'
   return $ KleenePlusM x

+zeroOrOneQuantifier :: AST a -> MParser (AST a)
+zeroOrOneQuantifier x = do
+  _ <- char '?'
+  return $ OrM [EmptyStrM, x]
+
 parse :: String -> Maybe (AST Char)
 parse = M.parseMaybe pRegEx
