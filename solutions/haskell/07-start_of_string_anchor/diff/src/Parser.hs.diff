@@ -38,52 +38,58 @@
 astToMatcher (KleeneStarM m)  = kleeneStarM $ astToMatcher m
 astToMatcher (KleenePlusM m)  = kleenePlusM $ astToMatcher m
 astToMatcher EmptyStrM        = emptyStrM


 notChar :: Char -> MParser Char
 notChar c = M.satisfy (/=c)

 anyNotUsed :: String -> MParser Char
 anyNotUsed s = M.satisfy $ not . (`elem` s)

 -- | Inverts an AST Char
 neg :: AST Char -> AST Char
 neg DigitM     = DigitInverseM
 neg AlphaNumM  = AlphaNumInverseM
 neg (PosLit c) = NegLit c
 neg _          = error "Unsupported input string"


 -- The regex parser starts here
 -- https://github.com/kean/Regex/blob/master/grammar.ebnf
 -- I had to adjust a few rules to support better parsing

 pRegEx :: MParser (AST Char)
 pRegEx = do
+  s <- pStartOfString
   expression <- pExpression
-  return $ ConcatM [KleeneStarM AnyCharM, expression, KleeneStarM AnyCharM]
+  return $ ConcatM [s, expression, KleeneStarM AnyCharM]
+
+pStartOfString :: MParser (AST Char)
+pStartOfString = do
+  s <- M.optional $ char '^'
+  return $ if isNothing s then  KleeneStarM AnyCharM else EmptyStrM

 pExpression :: MParser (AST Char)
 pExpression = pSubExpression

 pSubExpression :: MParser (AST Char)
 pSubExpression = do
   subExp <- M.some $ M.try pMatch
   return $ ConcatM subExp

 pMatch :: MParser (AST Char)
 pMatch = pMatchItem

 pMatchItem :: MParser (AST Char)
 pMatchItem = M.try pMatchCharacterClass M.<|> M.try pMatchCharacter

 pMatchCharacterClass :: MParser (AST Char)
 pMatchCharacterClass = M.try pCharacterGroup M.<|> M.try pCharacterClass

 pMatchCharacter :: MParser (AST Char)
 pMatchCharacter = do
   c <- anyNotUsed "|()$"
   return $ PosLit c

 pCharacterGroup :: MParser (AST Char)
 pCharacterGroup = M.try pPositiveCharacterGroup M.<|> M.try pNegativeCharacterGroup
