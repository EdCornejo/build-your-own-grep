@@ -25,31 +25,39 @@
 	}

 	ok, err := matchLine(line, pattern)
 	if err != nil {
 		fmt.Fprintf(os.Stderr, "error: %v\n", err)
 		os.Exit(2)
 	}

 	if !ok {
 		os.Exit(1)
 	}

 	// default exit code is 0 which means success
 }

 func matchLine(line []byte, pattern string) (bool, error) {
 	switch {
 	case pattern == `\d`:
 		for _, char := range string(line) { // ranging over string handles utf-8 multibyte characters correctly
 			if unicode.IsDigit(char) {
 				return true, nil
 			}
 		}

 		return false, nil
+	case pattern == `\w`:
+		for _, char := range string(line) {
+			if unicode.IsLetter(char) {
+				return true, nil
+			}
+		}
+
+		return false, nil
 	case utf8.RuneCountInString(pattern) == 1:
 		return bytes.ContainsAny(line, pattern), nil
 	}

 	return false, fmt.Errorf("unsupported pattern: %q", pattern)
 }
