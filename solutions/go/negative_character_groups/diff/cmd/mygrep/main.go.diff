@@ -34,35 +34,39 @@
 	if !ok {
 		os.Exit(1)
 	}

 	// default exit code is 0 which means success
 }

 func matchLine(line []byte, pattern string) (bool, error) {
 	switch {
 	case pattern == `\d`:
 		for _, char := range string(line) { // ranging over string handles utf-8 multibyte characters correctly
 			if unicode.IsDigit(char) {
 				return true, nil
 			}
 		}

 		return false, nil
 	case pattern == `\w`:
 		for _, char := range string(line) {
 			if unicode.IsLetter(char) {
 				return true, nil
 			}
 		}

 		return false, nil
+	case strings.HasPrefix(pattern, "[^") && strings.IndexByte(pattern, ']') == len(pattern)-1: // starts with "[^" and the ']' is the last
+		charset := pattern[2 : len(pattern)-1]
+
+		return !bytes.ContainsAny(line, charset), nil
 	case strings.HasPrefix(pattern, "[") && strings.IndexByte(pattern, ']') == len(pattern)-1: // first is '[' and the ']' is the last
 		charset := pattern[1 : len(pattern)-1]

 		return bytes.ContainsAny(line, charset), nil
 	case utf8.RuneCountInString(pattern) == 1:
 		return bytes.ContainsAny(line, pattern), nil
 	}

 	return false, fmt.Errorf("unsupported pattern: %q", pattern)
 }
